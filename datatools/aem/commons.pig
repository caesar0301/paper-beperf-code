/*
My pig macros called frequently.
Author: chenxm
Email: chenxm35@gmail.com

Require jars: datafu, piggybox
*/

-- Load activity-labeled HTTP logs generated by DetectActivity.pig.
DEFINE M_LOAD_HTTP(input_file) RETURNS data {
    $data = load '$input_file' as (userID:chararray, assocApName:chararray,
        srcIpAddr:long, dstIpAddr:long,
        srcTcpPort:long, dstTcpPort:long,
        flowStartTime:double, flowEndTime:double,
        flowConnDur:double, srcHasRst:boolean,
        dstHasRst:boolean, srcTotFin:long,
        dstTotFin:long, srcRttAvg:double,
        dstRttAvg:double, srcRttStd:double,
        dstRttStd:double, srcPylByt:long,
        dstPylByt:long, srcPylLstTime:double,
        dstPylLstTime:double, srcTtlMax:long,
        dstTtlMax:long, gnlBw:double, effBw:double,
        rxByt:long, rxPkt:long,
        oosPkt:long, flowID:chararray,
        connDir:boolean, reqTime:double,
        reqDur:double, idleDur0:double,
        rspTime:double, rspDur:double,
        idleDur1:double, reqPylByt:long,
        rspPylByt:long, reqMethod:chararray,
        reqUrl:chararray, reqProto:chararray,
        reqHost:chararray, reqUa:chararray,
        reqReferer:chararray, rspCode:chararray,
        rspServer:chararray, rspContentType:chararray,
        httpID:chararray, activityID:chararray,
        sessionID:chararray);
};

/**
 Extract activity metrics from activity-labeled HTTP logs
    output by `DetectActivity.pig`.
 The generated features have a broken schema definition.
 So I recover the schema by recall a foreach generator.
*/
DEFINE M_ACTIVITY_FEATURES(http_logs) RETURNS features {
    -- Filter data fields
    entity = foreach $http_logs {
        -- Calculate interruptive ratio (count).
        host = com.piggybox.http.ExtractUrlHost(reqHost);
        -- Service category
        serviceCat = com.piggybox.http.ServiceCategoryClassify(host);
        -- Application category
        appCat = com.piggybox.http.AppCategoryClassify(reqUa);
        IR = ((dstTotFin == 0 AND
            dstHasRst == false AND
            srcHasRst==true AND
            1.0*(flowEndTime-dstPylLstTime)/
            (dstRttAvg+dstRttStd) <= 1) ? 1 : 0);
        generate activityID, host as host,
            (reqPylByt+rspPylByt) as pylByt:long,
            reqTime, reqDur, rspTime, rspDur,IR as IR:long,
            sessionID, userID, assocApName, appCat as appCat:chararray,
            flatten(serviceCat) as (serviceCat:chararray,
            subCat1:chararray, subCat2:chararray);
    }
    -- Calculate activity features
    activity = group entity by activityID;
    $features = foreach activity {
        entity = order entity by reqTime;
        -- Host name
        host = datafu.pig.bags.FirstTupleFromBag(entity.host, null).$0;
        serviceCat = datafu.pig.bags.FirstTupleFromBag(entity.serviceCat,
            null).$0;
        subCat1 = datafu.pig.bags.FirstTupleFromBag(entity.subCat1, null).$0;
        subCat2 = datafu.pig.bags.FirstTupleFromBag(entity.subCat2, null).$0;
        appCat = datafu.pig.bags.FirstTupleFromBag(entity.appCat, null).$0;
        volume = COUNT(entity); -- The number of entities
        size = SUM(entity.pylByt); -- The number of activity payload bytes
        WTime = foreach entity generate rspTime-reqTime;
        MWTime = AVG(WTime); -- Mean Wait Time
        EDur = foreach entity generate rspTime+rspDur-reqTime;
        MEdur = AVG(EDur); --  Mean entity duration
        VEdur = datafu.pig.stats.VAR(EDur);
        VMR = VEdur / MEdur; -- Variance-to-Mean Ratio
        TTime = SUM(EDur); -- Total entity duration
        pairs = foreach entity generate reqTime as ST, rspTime+rspDur as ET;
        -- Activity Duration
        ADur = com.piggybox.omnilab.aem.PerceivedCompletionTime(pairs);
        CI = 1.0*TTime/ADur/volume; -- Currency Index
        EBw = foreach entity generate pylByt/(rspTime+rspDur-reqTime);
        PABw = SUM(EBw) * CI; -- Perceived activity bandwidth
        STime = MIN(pairs.ST); -- The start timestamp of activity
        ETime = MAX(pairs.ET); -- The end timestamp of activity
        IR = SUM(entity.IR); -- Total number of user reset in this activity
        SID = datafu.pig.bags.FirstTupleFromBag(entity.sessionID, null).$0;
        UID = datafu.pig.bags.FirstTupleFromBag(entity.userID, null).$0;
        APName = datafu.pig.bags.FirstTupleFromBag(entity.assocApName,
            null).$0;
        generate flatten(group) as AID:chararray, volume as volume:long,
            size as size:long, ADur as ADur:double, MWTime as MWTime:double,
            MEdur as MEdur:double, VMR as VMR:double, CI as CI:double,
            PABw as PABw:double, STime as STime:double, ETime as ETime:double,
            SIR as IR:long,APName as APName:chararray, SID as SID:chararray,
            UID as UID:chararray, -- mobility data
            host as host:chararray, appCat as appCat:chararray,
            serviceCat as serviceCat:chararray,
            subCat1 as subCat1:chararray,subCat2 as subCat2:chararray;
        }
        -- The generated features have a broken schema definition.
        -- I do NOT know why. So I need another step to restore the schema.
        $features = foreach $features generate
            $0 as AID:chararray, $1 as volume:long,
            $2 as size:long, $3 as ADur:double,
            $4 as MWTime:double, $5 as MEdur:double,
            $6 as VMR:double, $7 as CI:double,
            $8 as PABw:double, $9 as STime:double,
            $10 as ETime:double, $11 as IR:long,
            $12 as APName:chararray, $13 as SID:chararray,
            $14 as UID:chararray, $15 as host:chararray,
            $16 as appCat:chararray, $17 as serviceCat:chararray,
            $18 as subCat1:chararray, $19 as subCat2:chararray;
        -- filter the activity with valid values
        $features = filter $features by
            volume>0 and
            ADur>=0 and
            MWTime>=0 and
            MEdur>=0 and
            VMR>=0 and
            CI>=0 and
            PABw>=0;
};


-- Load activity features generated by M_ACTIVITY_FEATURES
DEFINE M_ACTIVITY_FEATURE_LOADER(raw) RETURNS result{
    $result  = load '$raw' as (AID:chararray, volume:long, size:long,
        ADur:double, MWTime:double,MEdur:double, VMR:double,
        CI:double, PABw:double, STime:double, ETime:double, IR:long,
        APName:chararray, SID:chararray, UID:chararray,
        host:chararray, appCat:chararray, serviceCat:chararray,
        subCat1:chararray, subCat2:chararray);};


/**
Extract features for each session about perceptual metrics and
    user engagement states.
*/
DEFINE CountEachFlatten datafu.pig.bags.CountEach('flatten');
DEFINE M_SESSION_FEATURES(activityFeatures) RETURNS session{
    -- Add building info
    activity = foreach $activityFeatures {
        binfo = com.piggybox.omnilab.GetAPBuildingInfo(APName);
        generate $0 ..,
            flatten(binfo) as
            (bname:chararray,
            btype:chararray,
            buser:chararray);}
    sgrp = group activity by (UID, SID);
    $session = foreach sgrp {
        activity = order activity by STime;
        stime = MIN(activity.STime);
        etime = MAX(activity.ETime);
        -- App (client) category
        app = foreach activity generate appCat;
        appcnt = CountEachFlatten(app);
        topapp = TOP(1, 1, appcnt);
        -- Activity duration
        ADur = foreach activity generate ADur;
        ADur = order ADur by $0;
        EADur = AVG(ADur);
        -- Expected waiting time
        MWTime = foreach activity generate MWTime;
        MWTime = order MWTime by $0;
        EMWTime = AVG(MWTime);
        -- Perceived bandwidth
        PABw = foreach activity generate PABw;
        PABw = order PABw by $0;
        EPABw = AVG(PABw);
        -- IR: inturruptive ratio
        volume = COUNT(activity); -- number of activities in a session
        size = SUM(activity.size);
        itur = filter activity by IR > 0;
        IR = 1.0 * COUNT(itur)/volume;
        -- VR: visit frequency, mean readting time
        pairs = foreach activity generate STime, ETime;
        VF = com.piggybox.omnilab.aem.VisitFrequency(pairs);
        VF = datafu.pig.bags.FirstTupleFromBag(VF, null);
        -- Tagged service;
        -- use datafu.pig.bags.CountEach to replace unsupported nested group
        fltact = filter activity by subCat1 is not null;
        srv = foreach fltact generate subCat1;
        srvcnt = CountEachFlatten(srv);
        topsrv = TOP(1, 1, srvcnt);
        -- Tagged building
        fltact = filter activity by bname is not null;
        bld = foreach fltact generate bname;
        bldcnt = CountEachFlatten(bld);
        topbld = TOP(1, 1, bldcnt);
        generate flatten(group) as (UID:chararray, SID:chararray),
            stime as STime:double, etime as ETime:double,
            volume as volume:long, size as size:long,
            EADur as ADur:double, EMWTime as MWTime:double,
            EPABw as PABw:double, (etime-stime) as DSL:double,
            IR as IR:double, flatten(VF.$0) as VF:double,
            flatten(topapp.$0) as appCat:chararray,
            flatten(topsrv.$0) as serviceCat:chararray,
            flatten(topbld.$0) as building:chararray;}
};

-- Load session features generated by M_SESSION_FEATURES()
DEFINE M_SESSION_FEATURE_LOADER(raw) RETURNS result{
    $result  = load '$raw' as (
        UID:chararray, SID:chararray, STime:double, ETime:double,
        volume:long, size:long, ADur:double, MWTime:double,
        PABw:double, DSL:double, IR:double, VF:double,
        appCat:chararray, serviceCat:chararray, building:chararray);
};
